1015
Help on TreeNode in module ete3.coretype.tree object:

class TreeNode(builtins.object)
 |  TreeNode(newick=None, format=0, dist=None, support=None, name=None, quoted_node_names=False)
 |  
 |  TreeNode (Tree) class is used to store a tree structure. A tree
 |  consists of a collection of TreeNode instances connected in a
 |  hierarchical way. Trees can be loaded from the New Hampshire Newick
 |  format (newick).
 |  
 |  :argument newick: Path to the file containing the tree or, alternatively,
 |     the text string containing the same information.
 |  
 |  :argument 0 format: subnewick format
 |  
 |    .. table::
 |  
 |        ======  ==============================================
 |        FORMAT  DESCRIPTION
 |        ======  ==============================================
 |        0        flexible with support values
 |        1        flexible with internal node names
 |        2        all branches + leaf names + internal supports
 |        3        all branches + all names
 |        4        leaf branches + leaf names
 |        5        internal and leaf branches + leaf names
 |        6        internal branches + leaf names
 |        7        leaf branches + all names
 |        8        all names
 |        9        leaf names
 |        100      topology only
 |        ======  ==============================================
 |  
 |  :returns: a tree node object which represents the base of the tree.
 |  
 |  **Examples:**
 |  
 |  ::
 |  
 |      t1 = Tree() # creates an empty tree
 |      t2 = Tree('(A:1,(B:1,(C:1,D:1):0.5):0.5);')
 |      t3 = Tree('/home/user/myNewickFile.txt')
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value)
 |      This allows to sum two trees.
 |  
 |  __and__(self, value)
 |      This allows to execute tree&'A' to obtain the descendant node
 |      whose name is A
 |  
 |  __bool__(self)
 |      Python3's equivalent of __nonzero__
 |      If this is not defined bool(class_instance) will call
 |      __len__ in python3
 |  
 |  __contains__(self, item)
 |      Check if item belongs to this node. The 'item' argument must
 |      be a node instance or its associated name.
 |  
 |  __init__(self, newick=None, format=0, dist=None, support=None, name=None, quoted_node_names=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |      Iterator over leaf nodes
 |  
 |  __len__(self)
 |      Node len returns number of children.
 |  
 |  __nonzero__(self)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Print tree in newick format.
 |  
 |  add_child(self, child=None, name=None, dist=None, support=None)
 |      Adds a new child to this node. If child node is not suplied
 |      as an argument, a new node instance will be created.
 |      
 |      :argument None child: the node instance to be added as a child.
 |      :argument None name: the name that will be given to the child.
 |      :argument None dist: the distance from the node to the child.
 |      :argument None support: the support value of child partition.
 |      
 |      :returns: The child node instance
 |  
 |  add_face(self, face, column, position='branch-right')
 |      .. versionadded: 2.1
 |      
 |      Add a fixed face to the node.  This type of faces will be
 |      always attached to nodes, independently of the layout
 |      function.
 |      
 |      :argument face: a Face or inherited instance
 |      :argument column: An integer number starting from 0
 |      :argument "branch-right" position: Posible values are:
 |        "branch-right", "branch-top", "branch-bottom", "float",
 |        "aligned"
 |  
 |  add_feature(self, pr_name, pr_value)
 |      Add or update a node's feature.
 |  
 |  add_features(self, **features)
 |      Add or update several features.
 |  
 |  add_sister(self, sister=None, name=None, dist=None)
 |      Adds a sister to this node. If sister node is not supplied
 |      as an argument, a new TreeNode instance will be created and
 |      returned.
 |  
 |  check_monophyly(self, values, target_attr, ignore_missing=False, unrooted=False)
 |      .. versionadded: 2.2
 |      
 |      Returns True if a given target attribute is monophyletic under
 |      this node for the provided set of values.
 |      
 |      If not all values are represented in the current tree
 |      structure, a ValueError exception will be raised to warn that
 |      strict monophyly could never be reached (this behaviour can be
 |      avoided by enabling the `ignore_missing` flag.
 |      
 |      :param values: a set of values for which monophyly is
 |          expected.
 |      
 |      :param target_attr: node attribute being used to check
 |          monophyly (i.e. species for species trees, names for gene
 |          family trees, or any custom feature present in the tree).
 |      
 |      :param False ignore_missing: Avoid raising an Exception when
 |          missing attributes are found.
 |      
 |      
 |      .. versionchanged: 2.3
 |      
 |      :param False unrooted: If True, tree will be treated as unrooted, thus
 |        allowing to find monophyly even when current outgroup is splitting a
 |        monophyletic group.
 |      
 |      :returns: the following tuple
 |                IsMonophyletic (boolean),
 |                clade type ('monophyletic', 'paraphyletic' or 'polyphyletic'),
 |                leaves breaking the monophyly (set)
 |  
 |  compare(self, ref_tree, use_collateral=False, min_support_source=0.0, min_support_ref=0.0, has_duplications=False, expand_polytomies=False, unrooted=False, max_treeko_splits_to_be_artifact=1000, ref_tree_attr='name', source_tree_attr='name')
 |      compare this tree with another using robinson foulds symmetric difference
 |      and number of shared edges. Trees of different sizes and with duplicated
 |      items allowed.
 |      
 |      returns: a Python dictionary with results
 |  
 |  convert_to_ultrametric(self, tree_length=None, strategy='balanced')
 |      .. versionadded: 2.1
 |      
 |      Converts a tree into ultrametric topology (all leaves must have
 |      the same distance to root). Note that, for visual inspection
 |      of ultrametric trees, node.img_style["size"] should be set to
 |      0.
 |  
 |  cophenetic_matrix(self)
 |      .. versionadded: 3.1.1
 |      
 |      Generate a cophenetic distance matrix of the treee to standard output
 |      
 |      The `cophenetic matrix <https://en.wikipedia.org/wiki/Cophenetic>` is a matrix representation of the
 |      distance between each node.
 |      
 |      if we have a tree like
 |      
 |                                 ----A
 |                    _____________|y
 |                    |            |
 |                    |            ----B
 |            ________|z
 |                    |            ----C
 |                    |            |
 |                    |____________|x     -----D
 |                                 |      |
 |                                 |______|w
 |                                        |
 |                                        |
 |                                        -----E
 |      
 |      Where w,x,y,z are internal nodes.
 |      d(A,B) = d(y,A) + d(y,B)
 |      and
 |      d(A, E) = d(z,A) + d(z, E) = {d(z,y) + d(y,A)} + {d(z,x) + d(x,w) + d(w,E)}
 |      
 |      We use an idea inspired by the ete3 team: https://gist.github.com/jhcepas/279f9009f46bf675e3a890c19191158b :
 |      
 |      For each node find its path to the root.
 |      
 |      e.g.
 |      
 |      A -> A, y, z
 |      E -> E, w, x,z
 |      
 |      and make these orderless sets. Then we XOR the two sets to only find the elements
 |      that are in one or other sets but not both. In this case A, E, y, x, w.
 |      
 |      The distance between the two nodes is the sum of the distances from each of those nodes
 |      to the parent
 |      
 |      One more optimization: since the distances are symmetric, and distance to itself is zero
 |      we user itertools.combinations rather than itertools.permutations. This cuts our computes from theta(n^2)
 |      1/2n^2 - n (= O(n^2), which is still not great, but in reality speeds things up for large trees).
 |      
 |      
 |      For this tree, we will return the two dimensional array:
 |                       A                  B                   C                   D                     E
 |      A                0           d(A-y) + d(B-y)     d(A-z) + d(C-z)     d(A-z) + d(D-z)       d(A-z) + d(E-z)
 |      B         d(B-y) + d(A-y)           0            d(B-z) + d(C-z)     d(B-z) + d(D-z)       d(B-z) + d(E-z)
 |      C         d(C-z) + d(A-z)    d(C-z) + d(B-z)            0            d(C-x) + d(D-x)       d(C-x) + d(E-x)
 |      D         d(D-z) + d(A-z)    d(D-z) + d(B-z)     d(D-x) + d(C-x)            0              d(D-w) + d(E-w)
 |      E         d(E-z) + d(A-z)    d(E-z) + d(B-z)     d(E-x) + d(C-x)     d(E-w) + d(D-w)              0
 |      
 |      We will also return the one dimensional array with the leaves in the order in which they appear in the matrix
 |      (i.e. the column and/or row headers).
 |      
 |      :param filename: the optional file to write to. If not provided, output will be to standard output
 |      :return: two-dimensional array and a one dimensional array
 |  
 |  copy(self, method='cpickle')
 |      .. versionadded: 2.1
 |      
 |      Returns a copy of the current node.
 |      
 |      :var cpickle method: Protocol used to copy the node
 |      structure. The following values are accepted:
 |      
 |         - "newick": Tree topology, node names, branch lengths and
 |           branch support values will be copied by as represented in
 |           the newick string (copy by newick string serialisation).
 |      
 |         - "newick-extended": Tree topology and all node features
 |           will be copied based on the extended newick format
 |           representation. Only node features will be copied, thus
 |           excluding other node attributes. As this method is also
 |           based on newick serialisation, features will be converted
 |           into text strings when making the copy.
 |      
 |         - "cpickle": The whole node structure and its content is
 |           cloned based on cPickle object serialisation (slower, but
 |           recommended for full tree copying)
 |      
 |         - "deepcopy": The whole node structure and its content is
 |           copied based on the standard "copy" Python functionality
 |           (this is the slowest method but it allows to copy complex
 |           objects even if attributes point to lambda functions,
 |           etc.)
 |  
 |  del_feature(self, pr_name)
 |      Permanently deletes a node's feature.
 |  
 |  delete(self, prevent_nondicotomic=True, preserve_branch_length=False)
 |      Deletes node from the tree structure. Notice that this method
 |      makes 'disappear' the node from the tree structure. This means
 |      that children from the deleted node are transferred to the
 |      next available parent.
 |      
 |      :param True prevent_nondicotomic: When True (default), delete
 |          function will be execute recursively to prevent
 |          single-child nodes.
 |      
 |      :param False preserve_branch_length: If True, branch lengths
 |          of the deleted nodes are transferred (summed up) to its
 |          parent's branch, thus keeping original distances among
 |          nodes.
 |      
 |      **Example:**
 |      
 |      ::
 |      
 |              / C
 |        root-|
 |             |        / B
 |              \--- H |
 |                      \ A
 |      
 |        > H.delete() will produce this structure:
 |      
 |              / C
 |             |
 |        root-|--B
 |             |
 |              \ A
 |  
 |  describe(self)
 |      Prints general information about this node and its
 |      connections.
 |  
 |  detach(self)
 |      Detachs this node (and all its descendants) from its parent
 |      and returns the referent to itself.
 |      
 |      Detached node conserves all its structure of descendants, and can
 |      be attached to another node through the 'add_child' function. This
 |      mechanism can be seen as a cut and paste.
 |  
 |  expand_polytomies(self, map_attr='name', polytomy_size_limit=5, skip_large_polytomies=False)
 |      .. versionadded:: 2.3
 |      
 |      Given a tree with one or more polytomies, this functions returns the
 |      list of all trees (in newick format) resulting from the combination of
 |      all possible solutions of the multifurcated nodes.
 |      
 |      .. warning:
 |      
 |         Please note that the number of of possible binary trees grows
 |         exponentially with the number and size of polytomies. Using this
 |         function with large multifurcations is not feasible:
 |      
 |         polytomy size: 3 number of binary trees: 3
 |         polytomy size: 4 number of binary trees: 15
 |         polytomy size: 5 number of binary trees: 105
 |         polytomy size: 6 number of binary trees: 945
 |         polytomy size: 7 number of binary trees: 10395
 |         polytomy size: 8 number of binary trees: 135135
 |         polytomy size: 9 number of binary trees: 2027025
 |      
 |      http://ajmonline.org/2010/darwin.php
 |  
 |  get_ancestors(self)
 |      versionadded: 2.2
 |      
 |      Returns the list of all ancestor nodes from current node to
 |      the current tree root.
 |  
 |  get_ascii(self, show_internal=True, compact=False, attributes=None)
 |      Returns a string containing an ascii drawing of the tree.
 |      
 |      :argument show_internal: includes internal edge names.
 |      :argument compact: use exactly one line per tip.
 |      
 |      :param attributes: A list of node attributes to shown in the
 |          ASCII representation.
 |  
 |  get_cached_content(self, store_attr=None, container_type=<class 'set'>, leaves_only=True, _store=None)
 |      .. versionadded: 2.2
 |      
 |      Returns a dictionary pointing to the preloaded content of each
 |      internal node under this tree. Such a dictionary is intended
 |      to work as a cache for operations that require many traversal
 |      operations.
 |      
 |      :param None store_attr: Specifies the node attribute that
 |          should be cached (i.e. name, distance, etc.). When none,
 |          the whole node instance is cached.
 |      
 |      :param _store: (internal use)
 |  
 |  get_children(self)
 |      Returns an independent list of node's children.
 |  
 |  get_closest_leaf(self, topology_only=False, is_leaf_fn=None)
 |      Returns node's closest descendant leaf and the distance to
 |      it.
 |      
 |      :argument False topology_only: If set to True, distance
 |        between nodes will be referred to the number of nodes
 |        between them. In other words, topological distance will be
 |        used instead of branch length distances.
 |      
 |      :return: A tuple containing the closest leaf referred to the
 |        current node and the distance to it.
 |  
 |  get_common_ancestor(self, *target_nodes, **kargs)
 |      Returns the first common ancestor between this node and a given
 |      list of 'target_nodes'.
 |      
 |      **Examples:**
 |      
 |      ::
 |      
 |        t = tree.Tree("(((A:0.1, B:0.01):0.001, C:0.0001):1.0[&&NHX:name=common], (D:0.00001):0.000001):2.0[&&NHX:name=root];")
 |        A = t.get_descendants_by_name("A")[0]
 |        C = t.get_descendants_by_name("C")[0]
 |        common =  A.get_common_ancestor(C)
 |        print common.name
 |  
 |  get_descendants(self, strategy='levelorder', is_leaf_fn=None)
 |      Returns a list of all (leaves and internal) descendant nodes.
 |      
 |      :argument None is_leaf_fn: See :func:`TreeNode.traverse` for
 |        documentation.
 |  
 |  get_distance(self, target, target2=None, topology_only=False)
 |      Returns the distance between two nodes. If only one target is
 |      specified, it returns the distance between the target and the
 |      current node.
 |      
 |      :argument target: a node within the same tree structure.
 |      
 |      :argument target2: a node within the same tree structure. If
 |        not specified, current node is used as target2.
 |      
 |      :argument False topology_only: If set to True, distance will
 |        refer to the number of nodes between target and target2.
 |      
 |      :returns: branch length distance between target and
 |        target2. If topology_only flag is True, returns the number
 |        of nodes between target and target2.
 |  
 |  get_edges(self, cached_content=None)
 |      .. versionadded:: 2.3
 |      
 |      Returns the list of edges of a tree. Each edge is represented as a
 |      tuple of two elements, each containing the list of nodes separated by
 |      the edge.
 |  
 |  get_farthest_leaf(self, topology_only=False, is_leaf_fn=None)
 |      Returns node's farthest descendant node (which is always a leaf), and the
 |      distance to it.
 |      
 |      :argument False topology_only: If set to True, distance
 |        between nodes will be referred to the number of nodes
 |        between them. In other words, topological distance will be
 |        used instead of branch length distances.
 |      
 |      :return: A tuple containing the farthest leaf referred to the
 |        current node and the distance to it.
 |  
 |  get_farthest_node(self, topology_only=False)
 |      Returns the node's farthest descendant or ancestor node, and the
 |      distance to it.
 |      
 |      :argument False topology_only: If set to True, distance
 |        between nodes will be referred to the number of nodes
 |        between them. In other words, topological distance will be
 |        used instead of branch length distances.
 |      
 |      :return: A tuple containing the farthest node referred to the
 |        current node and the distance to it.
 |  
 |  get_leaf_names(self, is_leaf_fn=None)
 |      Returns the list of terminal node names under the current
 |      node.
 |      
 |      :argument None is_leaf_fn: See :func:`TreeNode.traverse` for
 |        documentation.
 |  
 |  get_leaves(self, is_leaf_fn=None)
 |      Returns the list of terminal nodes (leaves) under this node.
 |      
 |      :argument None is_leaf_fn: See :func:`TreeNode.traverse` for
 |        documentation.
 |  
 |  get_leaves_by_name(self, name)
 |      Returns a list of leaf nodes matching a given name.
 |  
 |  get_midpoint_outgroup(self)
 |      Returns the node that divides the current tree into two distance-balanced
 |      partitions.
 |  
 |  get_monophyletic(self, values, target_attr)
 |      .. versionadded:: 2.2
 |      
 |      Returns a list of nodes matching the provided monophyly
 |      criteria. For a node to be considered a match, all
 |      `target_attr` values within and node, and exclusively them,
 |      should be grouped.
 |      
 |      :param values: a set of values for which monophyly is
 |          expected.
 |      
 |      :param target_attr: node attribute being used to check
 |          monophyly (i.e. species for species trees, names for gene
 |          family trees).
 |  
 |  get_sisters(self)
 |      Returns an independent list of sister nodes.
 |  
 |  get_topology_id(self, attr='name')
 |      .. versionadded:: 2.3
 |      
 |      Returns the unique ID representing the topology of the current tree. Two
 |      trees with the same topology will produce the same id. If trees are
 |      unrooted, make sure that the root node is not binary or use the
 |      tree.unroot() function before generating the topology id.
 |      
 |      This is useful to detect the number of unique topologies over a bunch of
 |      trees, without requiring full distance methods.
 |      
 |      The id is, by default, calculated based on the terminal node's names. Any
 |      other node attribute could be used instead.
 |  
 |  get_tree_root(self)
 |      Returns the absolute root node of current tree structure.
 |  
 |  is_leaf(self)
 |      Return True if current node is a leaf.
 |  
 |  is_root(self)
 |      Returns True if current node has no parent
 |  
 |  iter_ancestors(self)
 |      versionadded: 2.2
 |      
 |      Iterates over the list of all ancestor nodes from current node
 |      to the current tree root.
 |  
 |  iter_descendants(self, strategy='levelorder', is_leaf_fn=None)
 |      Returns an iterator over all descendant nodes.
 |      
 |      :argument None is_leaf_fn: See :func:`TreeNode.traverse` for
 |        documentation.
 |  
 |  iter_edges(self, cached_content=None)
 |      .. versionadded:: 2.3
 |      
 |      Iterate over the list of edges of a tree. Each edge is represented as a
 |      tuple of two elements, each containing the list of nodes separated by
 |      the edge.
 |  
 |  iter_leaf_names(self, is_leaf_fn=None)
 |      Returns an iterator over the leaf names under this node.
 |      
 |      :argument None is_leaf_fn: See :func:`TreeNode.traverse` for
 |        documentation.
 |  
 |  iter_leaves(self, is_leaf_fn=None)
 |      Returns an iterator over the leaves under this node.
 |      
 |      :argument None is_leaf_fn: See :func:`TreeNode.traverse` for
 |        documentation.
 |  
 |  iter_prepostorder(self, is_leaf_fn=None)
 |      Iterate over all nodes in a tree yielding every node in both
 |      pre and post order. Each iteration returns a postorder flag
 |      (True if node is being visited in postorder) and a node
 |      instance.
 |  
 |  iter_search_nodes(self, **conditions)
 |      Search nodes in an iterative way. Matches are yielded as they
 |      are being found. This avoids needing to scan the full tree
 |      topology before returning the first matches. Useful when
 |      dealing with huge trees.
 |  
 |  ladderize(self, direction=0)
 |      .. versionadded: 2.1
 |      
 |      Sort the branches of a given tree (swapping children nodes)
 |      according to the size of each partition.
 |      
 |      ::
 |      
 |         t =  Tree("(f,((d, ((a,b),c)),e));")
 |      
 |         print t
 |      
 |         #
 |         #      /-f
 |         #     |
 |         #     |          /-d
 |         # ----|         |
 |         #     |     /---|          /-a
 |         #     |    |    |     /---|
 |         #     |    |     \---|     \-b
 |         #      \---|         |
 |         #          |          \-c
 |         #          |
 |         #           \-e
 |      
 |         t.ladderize()
 |         print t
 |      
 |         #      /-f
 |         # ----|
 |         #     |     /-e
 |         #      \---|
 |         #          |     /-d
 |         #           \---|
 |         #               |     /-c
 |         #                \---|
 |         #                    |     /-a
 |         #                     \---|
 |         #                          \-b
 |  
 |  phonehome(self)
 |  
 |  populate(self, size, names_library=None, reuse_names=False, random_branches=False, branch_range=(0, 1), support_range=(0, 1))
 |      Generates a random topology by populating current node.
 |      
 |      :argument None names_library: If provided, names library
 |        (list, set, dict, etc.) will be used to name nodes.
 |      
 |      :argument False reuse_names: If True, node names will not be
 |        necessarily unique, which makes the process a bit more
 |        efficient.
 |      
 |      :argument False random_branches: If True, branch distances and support
 |        values will be randomized.
 |      
 |      :argument (0,1) branch_range: If random_branches is True, this
 |        range of values will be used to generate random distances.
 |      
 |      :argument (0,1) support_range: If random_branches is True,
 |        this range of values will be used to generate random branch
 |        support values.
 |  
 |  prune(self, nodes, preserve_branch_length=False)
 |      Prunes the topology of a node to conserve only the selected list of leaf
 |      internal nodes. The minimum number of nodes that conserve the
 |      topological relationships among the requested nodes will be
 |      retained. Root node is always conserved.
 |      
 |      :var nodes: a list of node names or node objects that should be retained
 |      
 |      :param False preserve_branch_length: If True, branch lengths
 |        of the deleted nodes are transferred (summed up) to its
 |        parent's branch, thus keeping original distances among
 |        nodes.
 |      
 |      **Examples:**
 |      
 |      ::
 |      
 |        t1 = Tree('(((((A,B)C)D,E)F,G)H,(I,J)K)root;', format=1)
 |        t1.prune(['A', 'B'])
 |      
 |      
 |        #                /-A
 |        #          /D /C|
 |        #       /F|      \-B
 |        #      |  |
 |        #    /H|   \-E
 |        #   |  |                        /-A
 |        #-root  \-G                 -root
 |        #   |                           \-B
 |        #   |   /-I
 |        #    \K|
 |        #       \-J
 |      
 |      
 |      
 |        t1 = Tree('(((((A,B)C)D,E)F,G)H,(I,J)K)root;', format=1)
 |        t1.prune(['A', 'B', 'C'])
 |      
 |        #                /-A
 |        #          /D /C|
 |        #       /F|      \-B
 |        #      |  |
 |        #    /H|   \-E
 |        #   |  |                              /-A
 |        #-root  \-G                  -root- C|
 |        #   |                                 \-B
 |        #   |   /-I
 |        #    \K|
 |        #       \-J
 |      
 |      
 |      
 |        t1 = Tree('(((((A,B)C)D,E)F,G)H,(I,J)K)root;', format=1)
 |        t1.prune(['A', 'B', 'I'])
 |      
 |      
 |        #                /-A
 |        #          /D /C|
 |        #       /F|      \-B
 |        #      |  |
 |        #    /H|   \-E                    /-I
 |        #   |  |                      -root
 |        #-root  \-G                      |   /-A
 |        #   |                             \C|
 |        #   |   /-I                          \-B
 |        #    \K|
 |        #       \-J
 |      
 |        t1 = Tree('(((((A,B)C)D,E)F,G)H,(I,J)K)root;', format=1)
 |        t1.prune(['A', 'B', 'F', 'H'])
 |      
 |        #                /-A
 |        #          /D /C|
 |        #       /F|      \-B
 |        #      |  |
 |        #    /H|   \-E
 |        #   |  |                              /-A
 |        #-root  \-G                -root-H /F|
 |        #   |                                 \-B
 |        #   |   /-I
 |        #    \K|
 |        #       \-J
 |  
 |  remove_child(self, child)
 |      Removes a child from this node (parent and child
 |      nodes still exit but are no longer connected).
 |  
 |  remove_sister(self, sister=None)
 |      Removes a sister node. It has the same effect as
 |      **`TreeNode.up.remove_child(sister)`**
 |      
 |      If a sister node is not supplied, the first sister will be deleted
 |      and returned.
 |      
 |      :argument sister: A node instance
 |      
 |      :return: The node removed
 |  
 |  render(self, file_name, layout=None, w=None, h=None, tree_style=None, units='px', dpi=90)
 |      Renders the node structure as an image.
 |      
 |      :var file_name: path to the output image file. valid
 |        extensions are .SVG, .PDF, .PNG
 |      
 |      :var layout: a layout function or a valid layout function name
 |      
 |      :var tree_style: a `TreeStyle` instance containing the image
 |        properties
 |      
 |      :var px units: "px": pixels, "mm": millimeters, "in": inches
 |      :var None h: height of the image in :attr:`units`
 |      :var None w: width of the image in :attr:`units`
 |      :var 90 dpi: dots per inches.
 |  
 |  resolve_polytomy(self, default_dist=0.0, default_support=0.0, recursive=True)
 |      .. versionadded: 2.2
 |      
 |      Resolve all polytomies under current node by creating an
 |      arbitrary dicotomic structure among the affected nodes. This
 |      function randomly modifies current tree topology and should
 |      only be used for compatibility reasons (i.e. programs
 |      rejecting multifurcated node in the newick representation).
 |      
 |      :param 0.0 default_dist: artificial branch distance of new
 |          nodes.
 |      
 |      :param 0.0 default_support: artificial branch support of new
 |          nodes.
 |      
 |      :param True recursive: Resolve any polytomy under this
 |           node. When False, only current node will be checked and fixed.
 |  
 |  robinson_foulds(self, t2, attr_t1='name', attr_t2='name', unrooted_trees=False, expand_polytomies=False, polytomy_size_limit=5, skip_large_polytomies=False, correct_by_polytomy_size=False, min_support_t1=0.0, min_support_t2=0.0)
 |      .. versionadded: 2.2
 |      
 |      Returns the Robinson-Foulds symmetric distance between current
 |      tree and a different tree instance.
 |      
 |      :param t2: reference tree
 |      
 |      :param name attr_t1: Compare trees using a custom node
 |                            attribute as a node name.
 |      
 |      :param name attr_t2: Compare trees using a custom node
 |                            attribute as a node name in target tree.
 |      
 |      :param False attr_t2: If True, consider trees as unrooted.
 |      
 |      :param False expand_polytomies: If True, all polytomies in the reference
 |         and target tree will be expanded into all possible binary
 |         trees. Robinson-foulds distance will be calculated between all
 |         tree combinations and the minimum value will be returned.
 |         See also, :func:`NodeTree.expand_polytomy`.
 |      
 |      :returns: (rf, rf_max, common_attrs, names, edges_t1, edges_t2,  discarded_edges_t1, discarded_edges_t2)
 |  
 |  search_nodes(self, **conditions)
 |      Returns the list of nodes matching a given set of conditions.
 |      
 |      **Example:**
 |      
 |      ::
 |      
 |        tree.search_nodes(dist=0.0, name="human")
 |  
 |  set_outgroup(self, outgroup)
 |      Sets a descendant node as the outgroup of a tree.  This function
 |      can be used to root a tree or even an internal node.
 |      
 |      :argument outgroup: a node instance within the same tree
 |        structure that will be used as a basal node.
 |  
 |  set_style(self, node_style)
 |      .. versionadded: 2.1
 |      
 |      Set 'node_style' as the fixed style for the current node.
 |  
 |  show(self, layout=None, tree_style=None, name='ETE')
 |      Starts an interactive session to visualize current node
 |      structure using provided layout and TreeStyle.
 |  
 |  sort_descendants(self, attr='name')
 |      .. versionadded: 2.1
 |      
 |      Sort the branches of a given tree by node names. After the
 |      tree is sorted. Note that if duplicated names are present,
 |      extra criteria should be added to sort nodes.
 |  
 |  standardize(self, delete_orphan=True, preserve_branch_length=True)
 |      .. versionadded:: 2.3
 |      
 |      process current tree structure to produce a standardized topology: nodes
 |      with only one child are removed and multifurcations are automatically resolved.
 |  
 |  swap_children(self)
 |      Swaps current children order.
 |  
 |  traverse(self, strategy='levelorder', is_leaf_fn=None)
 |      Returns an iterator to traverse the tree structure under this
 |      node.
 |      
 |      :argument "levelorder" strategy: set the way in which tree
 |         will be traversed. Possible values are: "preorder" (first
 |         parent and then children) 'postorder' (first children and
 |         the parent) and "levelorder" (nodes are visited in order
 |         from root to leaves)
 |      
 |      :argument None is_leaf_fn: If supplied, ``is_leaf_fn``
 |         function will be used to interrogate nodes about if they
 |         are terminal or internal. ``is_leaf_fn`` function should
 |         receive a node instance as first argument and return True
 |         or False. Use this argument to traverse a tree by
 |         dynamically collapsing internal nodes matching
 |         ``is_leaf_fn``.
 |  
 |  unroot(self, mode='legacy')
 |      Unroots current node. This function is expected to be used on
 |      the absolute tree root node, but it can be also be applied to
 |      any other internal node. It will convert a split into a
 |      multifurcation.
 |      
 |      :argument "legacy" mode: The value can be "legacy" or "keep".
 |      If value is "keep", then function keeps the distance between
 |      the leaves by adding the distance associated to the deleted
 |      edge to the remaining edge. In the other case the distance
 |      value of the deleted edge is dropped
 |  
 |  write(self, features=None, outfile=None, format=0, is_leaf_fn=None, format_root_node=False, dist_formatter=None, support_formatter=None, name_formatter=None, quoted_node_names=False)
 |      Returns the newick representation of current node. Several
 |      arguments control the way in which extra data is shown for
 |      every node:
 |      
 |      :argument features: a list of feature names to be exported
 |        using the Extended Newick Format (i.e. features=["name",
 |        "dist"]). Use an empty list to export all available features
 |        in each node (features=[])
 |      
 |      :argument outfile: writes the output to a given file
 |      
 |      :argument format: defines the newick standard used to encode the
 |        tree. See tutorial for details.
 |      
 |      :argument False format_root_node: If True, it allows features
 |        and branch information from root node to be exported as a
 |        part of the newick text string. For newick compatibility
 |        reasons, this is False by default.
 |      
 |      :argument is_leaf_fn: See :func:`TreeNode.traverse` for
 |        documentation.
 |      
 |      **Example:**
 |      
 |      ::
 |      
 |           t.write(features=["species","name"], format=1)
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  from_parent_child_table(parent_child_table)
 |      Converts a parent-child table into an ETE Tree instance.
 |      
 |      :argument parent_child_table: a list of tuples containing parent-child
 |         relationships. For example: [("A", "B", 0.1), ("A", "C", 0.2), ("C",
 |         "D", 1), ("C", "E", 1.5)]. Where each tuple represents: [parent, child,
 |         child-parent-dist]
 |      
 |      :returns: A new Tree instance
 |      
 |      :example:
 |      
 |      >>> tree = Tree.from_parent_child_table([("A", "B", 0.1), ("A", "C", 0.2), ("C", "D", 1), ("C", "E", 1.5)])
 |      >>> print tree
 |  
 |  from_skbio(skbio_tree, map_attributes=None)
 |      Converts a scikit-bio TreeNode object into ETE Tree object.
 |      
 |      :argument skbio_tree: a scikit bio TreeNode instance
 |      
 |      :argument None map_attributes: A list of attribute nanes in the
 |         scikit-bio tree that should be mapped into the ETE tree
 |         instance. (name, id and branch length are always mapped)
 |      
 |      :returns: A new Tree instance
 |      
 |      :example:
 |      
 |      >>> tree = Tree.from_skibio(skbioTree, map_attributes=["value"])
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  children
 |  
 |  dist
 |  
 |  faces
 |  
 |  img_style
 |  
 |  support
 |  
 |  up

None
[Finished in 1.4s]